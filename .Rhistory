color = "Metric"
) +
scale_color_manual(values = c("Capitation minus Cost" = "steelblue")) +
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_blank(),
aspect.ratio = 1,
plot.title = element_text(hjust = 0.5),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = "black")
)
# save the plot
ggsave("~/JMP/Output/figures/profit_without_premium_kernal.png", width = 4, height = 3)
# 绘制图形
ggplot(step2_data, aes(x = x_percentile *100)) +
geom_smooth(aes(y = -mc, color = "Capitation minus Cost"),
method = "loess", se = TRUE, level = 0.95,
span = 0.5, size =0.5, alpha = 0.5) +
labs(
x = "Plan Generosity Percentile",
y = "Plan Capitation minus Cost in K$",
color = "Metric"
) +
scale_color_manual(values = c("Capitation minus Cost" = "steelblue")) +
theme_minimal() +
theme(
legend.position = "top",
# make the legend icon smaller
legend.key.size = unit(0.5, "cm"),
legend.title = element_blank(),
aspect.ratio = 1,
plot.title = element_text(hjust = 0.5),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = "black")
)
# 绘制图形
ggplot(step2_data, aes(x = x_percentile *100)) +
geom_smooth(aes(y = -mc, color = "Capitation minus Cost"),
method = "loess", se = TRUE, level = 0.95,
span = 0.5, size =0.5, alpha = 0.5) +
labs(
x = "Plan Generosity Percentile",
y = "Plan Capitation minus Cost in K$",
color = "Metric"
) +
scale_color_manual(values = c("Capitation minus Cost" = "steelblue")) +
theme_minimal() +
theme(
legend.position = "top",
# make the legend icon smaller
legend.key.size = unit(0.1, "cm"),
legend.title = element_blank(),
aspect.ratio = 1,
plot.title = element_text(hjust = 0.5),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = "black")
)
# 绘制图形
ggplot(step2_data, aes(x = x_percentile *100)) +
geom_smooth(aes(y = -mc, color = "Capitation minus Cost"),
method = "loess", se = TRUE, level = 0.95,
span = 0.5, size =0.5, alpha = 0.5) +
labs(
x = "Plan Generosity Percentile",
y = "Plan Capitation minus Cost in K$",
color = "Metric"
) +
scale_color_manual(values = c("Capitation minus Cost" = "steelblue")) +
theme_minimal() +
theme(
legend.position = "top",
# make the legend icon smaller
legend.key.size = unit(0.2, "cm"),
legend.title = element_blank(),
aspect.ratio = 1,
plot.title = element_text(hjust = 0.5),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = "black")
)
# save the plot
ggsave("~/JMP/Output/figures/profit_without_premium_kernal.png", width = 4, height = 3)
# load setup
source("~/JMP/Code/R/setup.R")
# load data
plan_state_costs <- read_csv(file.path(
"~/JMP/Code/MATLAB/Supply/plan_state_costs.csv")) %>%
select(
year, state, firm, contract_plan, bid, mc, mc_derivative,
market_share = sum_state_s)
supply_iv <- read_csv(file.path(Processed_path, "supply_iv.csv"))
generosity <- read_csv(
file.path(Processed_path, "plan_county_level.csv")) %>%
select(
year, state, contract_plan, OOP, g
) %>%
filter(
contract_plan != "small_plan_average" &
contract_plan != "Medigap") %>%
# unique records by year, state, contract_plan
distinct(year, state, contract_plan, .keep_all = TRUE)
plan_state_level <- read_csv(
file.path(Processed_path, "plan_state_level.csv")) %>%
select(
year, state, contract_plan, benchmark, risk_score,
dental, hearing, vision, star, plan_type,
) %>%
mutate(
capitation = benchmark * risk_score * 12 / 1000,
# generate hmo dummy if plan_type starts with "HMO"
hmo = ifelse(str_detect(plan_type, "^HMO"), 1, 0),
)
# merge data
step2_data <- plan_state_costs %>%
merge(generosity, by = c("year", "state", "contract_plan")) %>%
merge(supply_iv, by = c("year", "state", "contract_plan")) %>%
merge(plan_state_level, by = c("year", "state", "contract_plan")) %>%
mutate(full_mc = mc + capitation) %>%
mutate(full_income = bid + capitation) %>%
mutate(markup_rate = (full_income - full_mc) / full_mc) %>%
mutate(markup_amount = bid - mc) %>%
mutate(firm_factor = case_when(
str_detect(firm, regex("Aetna", ignore_case = TRUE)) ~ "Aetna",
str_detect(firm, regex("Anthem", ignore_case = TRUE)) ~ "Anthem",
str_detect(firm, regex("Blue\\s*Cross|Blue\\s*Shield", ignore_case = TRUE)) ~ "BCBS",
str_detect(firm, regex("Cigna", ignore_case = TRUE)) ~ "Cigna",
str_detect(firm, regex("Humana", ignore_case = TRUE)) ~ "Humana",
str_detect(firm, regex("United\\s*Health\\s*Group", ignore_case = TRUE)) ~ "UHG",
TRUE ~ "Other"
)) %>%
mutate(firm_factor = factor(firm_factor)) %>%
mutate(firm_factor = relevel(firm_factor, ref = "Other")) %>%
mutate(oop = OOP/1000)
# TABLE
summary_all <- step2_data %>%
summarise(
full_mc = mean(full_mc, na.rm = TRUE),
capitation = mean(capitation, na.rm = TRUE),
net_cost = mean(mc, na.rm = TRUE),
bid = mean(bid, na.rm = TRUE),
markup_amount = mean(markup_amount, na.rm = TRUE),
markup_rate = mean(markup_rate, na.rm = TRUE),
)
summary_by_g <- step2_data %>%
mutate(g_group = ntile(g, 4)) %>%
group_by(g_group) %>%
summarise(
full_mc = mean(full_mc, na.rm = TRUE),
capitation = mean(capitation, na.rm = TRUE),
net_cost = mean(mc, na.rm = TRUE),
bid = mean(bid, na.rm = TRUE),
mc_derivative = mean(mc_derivative, na.rm = TRUE),
n = n(),
.groups = 'drop'  # 避免结果留下组索引
) %>%
select(-n)
# calculate the mean of full_mc by firm_factor
summary_by_firm <- step2_data %>%
group_by(firm_factor) %>%
summarise(
full_mc = mean(full_mc, na.rm = TRUE),
capitation = mean(capitation, na.rm = TRUE),
net_cost = mean(mc, na.rm = TRUE),
bid = mean(bid, na.rm = TRUE),
n = n(),
.groups = 'drop'  # 避免结果留下组索引
) %>%
# remove the "Other" level
filter(firm_factor != "Other")
# GRAPH
# plot capitation and mc against generosity
ggplot(step2_data, aes(x = OOP/1000)) +
geom_point(aes(y = capitation, color = "Capitation"), size = 0.1, alpha = 0.5) +
geom_smooth(aes(y = capitation, color = "Capitation"), method = "lm", se = FALSE) +
geom_point(aes(y = full_mc, color = "Marginal Cost"), size = 0.1, alpha = 0.5) +
geom_smooth(aes(y = full_mc, color = "Marginal Cost"), method = "lm", se = FALSE) +
labs(
x = "Generosity \n (measured by Expected OOP in K$)",
y = "Capitation and Marginal Cost in K$",
color = "Metric"
) +
scale_color_manual(values = c("Capitation" = "blue", "Marginal Cost" = "red")) +
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_blank(),
# keep the ratio of x and y axis the same
aspect.ratio = 1
) +
scale_x_reverse()  # Reverse the x-axis
# save the plot
ggsave("~/JMP/Output/figures/capitation_mc.png", width = 4, height = 3)
# Plot MC - Capitation and bid against Generosity
ggplot(step2_data, aes(x = OOP/1000)) +
geom_point(aes(y = mc, color = "MC minus Capitation"), size = 0.1, alpha = 0.5) +
geom_smooth(aes(y = mc, color = "MC minus Capitation"), method = "lm", se = FALSE) +
labs(
x = "Plan Generosity (measured by Expected OOP in K$)",
y = "MC minus Capitation in K$",
color = "Metric"
) +
scale_color_manual(values = c("MC minus Capitation" = "steelblue")) +
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_blank(),
# keep the ratio of x and y axis the same
aspect.ratio = 1
) +
scale_x_reverse()  # Reverse the x-axis
# save the plot
ggsave("~/JMP/Output/figures/mc_minus_capitation.png", width = 4, height = 3)
# Plot MC - Capitation against Generosity Percentile, Kernel Regression
# 转换 x 为百分位数
step2_data <- step2_data %>%
mutate(x_percentile = percent_rank(-OOP/1000))
# 绘制图形
ggplot(step2_data, aes(x = x_percentile *100)) +
geom_smooth(aes(y = -mc, color = "Capitation minus Cost"),
method = "loess", se = TRUE, level = 0.95,
span = 0.5, size =0.5, alpha = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # 添加 y=0 的虚线
labs(
x = "Plan Generosity Percentile",
y = "Plan Capitation minus Cost in K$",
color = "Metric"
) +
scale_color_manual(values = c("Capitation minus Cost" = "steelblue")) +
theme_minimal() +
theme(
legend.position = "top",
# make the legend icon smaller
legend.key.size = unit(0.2, "cm"),
legend.title = element_blank(),
aspect.ratio = 1,
plot.title = element_text(hjust = 0.5),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = "black")
)
# load setup
source("~/JMP/Code/R/setup.R")
# load data
plan_state_costs <- read_csv(file.path(
"~/JMP/Code/MATLAB/Supply/plan_state_costs.csv")) %>%
select(
year, state, firm, contract_plan, bid, mc, mc_derivative,
market_share = sum_state_s)
supply_iv <- read_csv(file.path(Processed_path, "supply_iv.csv"))
generosity <- read_csv(
file.path(Processed_path, "plan_county_level.csv")) %>%
select(
year, state, contract_plan, OOP, g
) %>%
filter(
contract_plan != "small_plan_average" &
contract_plan != "Medigap") %>%
# unique records by year, state, contract_plan
distinct(year, state, contract_plan, .keep_all = TRUE)
plan_state_level <- read_csv(
file.path(Processed_path, "plan_state_level.csv")) %>%
select(
year, state, contract_plan, benchmark, risk_score,
dental, hearing, vision, star, plan_type,
) %>%
mutate(
capitation = benchmark * risk_score * 12 / 1000,
# generate hmo dummy if plan_type starts with "HMO"
hmo = ifelse(str_detect(plan_type, "^HMO"), 1, 0),
)
# merge data
step2_data <- plan_state_costs %>%
merge(generosity, by = c("year", "state", "contract_plan")) %>%
merge(supply_iv, by = c("year", "state", "contract_plan")) %>%
merge(plan_state_level, by = c("year", "state", "contract_plan")) %>%
mutate(full_mc = mc + capitation) %>%
mutate(full_income = bid + capitation) %>%
mutate(markup_rate = (full_income - full_mc) / full_mc) %>%
mutate(markup_amount = bid - mc) %>%
mutate(firm_factor = case_when(
str_detect(firm, regex("Aetna", ignore_case = TRUE)) ~ "Aetna",
str_detect(firm, regex("Anthem", ignore_case = TRUE)) ~ "Anthem",
str_detect(firm, regex("Blue\\s*Cross|Blue\\s*Shield", ignore_case = TRUE)) ~ "BCBS",
str_detect(firm, regex("Cigna", ignore_case = TRUE)) ~ "Cigna",
str_detect(firm, regex("Humana", ignore_case = TRUE)) ~ "Humana",
str_detect(firm, regex("United\\s*Health\\s*Group", ignore_case = TRUE)) ~ "UHG",
TRUE ~ "Other"
)) %>%
mutate(firm_factor = factor(firm_factor)) %>%
mutate(firm_factor = relevel(firm_factor, ref = "Other")) %>%
mutate(oop = OOP/1000)
# TABLE
summary_all <- step2_data %>%
summarise(
full_mc = mean(full_mc, na.rm = TRUE),
capitation = mean(capitation, na.rm = TRUE),
net_cost = mean(mc, na.rm = TRUE),
bid = mean(bid, na.rm = TRUE),
markup_amount = mean(markup_amount, na.rm = TRUE),
markup_rate = mean(markup_rate, na.rm = TRUE),
)
summary_by_g <- step2_data %>%
mutate(g_group = ntile(g, 4)) %>%
group_by(g_group) %>%
summarise(
full_mc = mean(full_mc, na.rm = TRUE),
capitation = mean(capitation, na.rm = TRUE),
net_cost = mean(mc, na.rm = TRUE),
bid = mean(bid, na.rm = TRUE),
mc_derivative = mean(mc_derivative, na.rm = TRUE),
n = n(),
.groups = 'drop'  # 避免结果留下组索引
) %>%
select(-n)
# calculate the mean of full_mc by firm_factor
summary_by_firm <- step2_data %>%
group_by(firm_factor) %>%
summarise(
full_mc = mean(full_mc, na.rm = TRUE),
capitation = mean(capitation, na.rm = TRUE),
net_cost = mean(mc, na.rm = TRUE),
bid = mean(bid, na.rm = TRUE),
n = n(),
.groups = 'drop'  # 避免结果留下组索引
) %>%
# remove the "Other" level
filter(firm_factor != "Other")
# GRAPH
# plot capitation and mc against generosity
ggplot(step2_data, aes(x = OOP/1000)) +
geom_point(aes(y = capitation, color = "Capitation"), size = 0.1, alpha = 0.5) +
geom_smooth(aes(y = capitation, color = "Capitation"), method = "lm", se = FALSE) +
geom_point(aes(y = full_mc, color = "Marginal Cost"), size = 0.1, alpha = 0.5) +
geom_smooth(aes(y = full_mc, color = "Marginal Cost"), method = "lm", se = FALSE) +
labs(
x = "Generosity \n (measured by Expected OOP in K$)",
y = "Capitation and Marginal Cost in K$",
color = "Metric"
) +
scale_color_manual(values = c("Capitation" = "blue", "Marginal Cost" = "red")) +
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_blank(),
# keep the ratio of x and y axis the same
aspect.ratio = 1
) +
scale_x_reverse()  # Reverse the x-axis
# save the plot
ggsave("~/JMP/Output/figures/capitation_mc.png", width = 4, height = 3)
# Plot MC - Capitation and bid against Generosity
ggplot(step2_data, aes(x = OOP/1000)) +
geom_point(aes(y = mc, color = "MC minus Capitation"), size = 0.1, alpha = 0.5) +
geom_smooth(aes(y = mc, color = "MC minus Capitation"), method = "lm", se = FALSE) +
labs(
x = "Plan Generosity (measured by Expected OOP in K$)",
y = "MC minus Capitation in K$",
color = "Metric"
) +
scale_color_manual(values = c("MC minus Capitation" = "steelblue")) +
theme_minimal() +
theme(
legend.position = "top",
legend.title = element_blank(),
# keep the ratio of x and y axis the same
aspect.ratio = 1
) +
scale_x_reverse()  # Reverse the x-axis
# save the plot
ggsave("~/JMP/Output/figures/mc_minus_capitation.png", width = 4, height = 3)
# Plot MC - Capitation against Generosity Percentile, Kernel Regression
# 转换 x 为百分位数
step2_data <- step2_data %>%
mutate(x_percentile = percent_rank(-OOP/1000))
# 绘制图形
ggplot(step2_data, aes(x = x_percentile *100)) +
geom_smooth(aes(y = -mc, color = "Capitation minus Cost"),
method = "loess", se = TRUE, level = 0.95,
span = 0.5, size =0.5, alpha = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # 添加 y=0 的虚线
labs(
x = "Plan Generosity Percentile",
y = "Plan Capitation minus Cost in K$",
color = "Metric"
) +
scale_color_manual(values = c("Capitation minus Cost" = "steelblue")) +
theme_minimal() +
theme(
legend.position = "top",
# make the legend icon smaller
legend.key.size = unit(0.2, "cm"),
legend.title = element_blank(),
aspect.ratio = 1,
plot.title = element_text(hjust = 0.5),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = "black")
)
# save the plot
ggsave("~/JMP/Output/figures/profit_without_premium_kernal.png", width = 4, height = 3)
# install tidyverse package if not already installed
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
# Load the tidyverse package
library(tidyverse)
# install tidyverse package if not already installed
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
# Load the tidyverse package
library(tidyverse)
# Set the working directory
setwd("~/Projects/eco324_ps1")
# open a log file
sink("example.log")
# Load the data
data <- read_csv("verboven_cars.csv")
# install tidyverse package if not already installed
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
# Load the tidyverse package
library(tidyverse)
# Set the working directory
setwd("~/Projects/eco324_ps1")
# open a log file
sink("example.log")
# Load the data
data <- read.csv("verboven_cars.csv")
View(data)
View(data)
# install tidyverse package if not already installed
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
# Load the tidyverse package
library(tidyverse)
# Set the working directory
setwd("~/Projects/eco324_ps1")
# open a log file
sink("example.log")
# Load the data
data <- read.csv("verboven_cars.csv")
# close the log file
sink()
# install tidyverse package if not already installed
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
# Load the tidyverse package
library(tidyverse)
# Set the working directory
setwd("~/Projects/eco324_ps1")
# open a log file
sink("example.log")
# Load the data
data <- read.csv("verboven_cars.csv")
# Print the first few rows of the data
head(data)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
library(tidyverse)
summary(data)
data <- data %>%
mutate(log_price = log(price))
data <- data %>%
mutate(log_price = log(price))
data <- data %>%
rename(year = ye)
data <- data %>%
rename(year = ye)
data <- data %>%
rename(year = ye)
data <- data %>%
rename(ye = year)
View(data)
data <- data %>%
rename(year = ye)
data <- data %>%
mutate(market_size = pop/4)
# Install fixest if not already installed
if (!requireNamespace("fixest", quietly = TRUE)) {
install.packages("fixest")
}
library(fixest)
# Install fixest if not already installed
if (!requireNamespace("fixest", quietly = TRUE)) {
install.packages("fixest")
}
library(fixest)
install.packages("fixest")
# Install fixest if not already installed
if (!requireNamespace("fixest", quietly = TRUE)) {
install.packages("fixest")
}
library(fixest)
sudo apt update
